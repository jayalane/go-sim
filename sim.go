// -*- tab-width:2 -*-

// Package sim provides a library to specify a distributed system
// discrete event simulation and then run it to generate statistics
package sim

//import (
//	"fmt"
//)

type stateT int

const (
	new stateT = iota
	selfTimeA
	remoteCallsWait
	selfTimeB
	done
)

// TimeProcessor is an interface for the main loop
// to schedule
type TimeProcessor interface {
	NextTime() uint64
	ProcessTime(uint64) error
}

// Latency is an interface for configuring a distribution of an RV
type Latency interface {
	getTimeToSleepMs()
}

// Stage is a piece of an application run
type Stage struct {
	firstLocalWork Latency
	depsToCall     []*AppType
}

// AppType is an application with
// certain work profile, name, downstream deps
type AppType struct {
	name   string
	stages []*Stage
}

// AppInstance is an application running behind an LB
type AppInstance struct {
	app *AppType
	TimeProcessor
	jobs []*Job
}

// LB is a round-robining LB in front
// of a App
type LB struct {
	TimeProcessor
	app     *AppType
	targets []*AppInstance
}

// Call s are calls from one app
// to another, thru an LB
type Call struct {
	TimeProcessor  // maybe?
	connectTimeout uint64
	readTimeout    uint64
	retries        uint64
}

// Job is work generated by a call to an app instance
// in the app
type Job struct {
	TimeProcessor
	app          *AppInstance
	wakeUp       uint64
	pendingCalls []*Call
	state        stateT
}

// EntryPoint is a source of events
type EntryPoint struct {
	// Later:  (can't say to do due to linting) have concept of
	// customer flow)
	TimeProcessor
	lambda float64
	app    *AppType
}
